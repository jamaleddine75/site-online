<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Take Exam</title>
  <script src="https://unpkg.com/lucide@latest"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Custom styles if needed */
  </style>
</head>
<body class="min-h-screen bg-slate-800 flex items-center justify-center p-4">
  <div class="w-full max-w-2xl p-8 bg-slate-900 border border-slate-700 shadow-xl rounded-lg">
    <div class="space-y-6">
      <div class="flex justify-between items-center">
        <h1 class="text-2xl font-bold text-white" id="exam-title">Sample Exam</h1>
        <div class="flex items-center bg-slate-800 px-3 py-1 rounded-full">
          <i data-lucide="timer" class="text-purple-400 mr-2 w-4 h-4"></i>
          <span class="font-mono text-slate-300" id="timer">10s</span>
        </div>
      </div>
      
      <div class="h-2 bg-slate-800 rounded">
        <div class="h-full bg-purple-500 rounded" id="progress-bar" style="width: 33.33%"></div>
      </div>

      <div class="bg-slate-800 p-4 rounded-lg">
        <h2 class="text-xl text-white mb-4" id="question-counter">
          Question 1 of 3
        </h2>
        
        <p class="text-slate-300 text-lg mb-6" id="question-text">What is 2 + 2?</p>
        
        <div class="space-y-3" id="qcm-options">
          <label class="block p-3 rounded-lg border cursor-pointer transition-colors bg-slate-700 border-slate-600 hover:border-slate-500">
            <div class="flex items-center">
              <input type="radio" name="question-1" value="1" class="sr-only">
              <div class="w-4 h-4 mr-3 rounded-full flex items-center justify-center border border-slate-400"></div>
              <span class="text-slate-200">3</span>
            </div>
          </label>
          <label class="block p-3 rounded-lg border cursor-pointer transition-colors bg-slate-700 border-slate-600 hover:border-slate-500">
            <div class="flex items-center">
              <input type="radio" name="question-1" value="2" class="sr-only">
              <div class="w-4 h-4 mr-3 rounded-full flex items-center justify-center border border-slate-400"></div>
              <span class="text-slate-200">4</span>
            </div>
          </label>
          <label class="block p-3 rounded-lg border cursor-pointer transition-colors bg-slate-700 border-slate-600 hover:border-slate-500">
            <div class="flex items-center">
              <input type="radio" name="question-1" value="3" class="sr-only">
              <div class="w-4 h-4 mr-3 rounded-full flex items-center justify-center border border-slate-400"></div>
              <span class="text-slate-200">5</span>
            </div>
          </label>
        </div>
      </div>
      
      <div class="flex justify-between">
        <button class="px-4 py-2 border border-slate-700 text-slate-400 rounded-md opacity-50 cursor-not-allowed" id="prev-btn" disabled>
          Previous
        </button>
        
        <button class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md flex items-center gap-2" id="next-btn">
          Next Question
          <i data-lucide="arrow-right" class="w-4 h-4"></i>
        </button>
      </div>
    </div>
  </div>

  <script>
    // Initialize Lucide icons
    lucide.createIcons();
    
    // Mock exam data
    const exam = {
 };

    let currentQuestionIndex = 0;
    let timeLeft = exam.questions[0].timer;
    let answers = {};
    let timerInterval;
    
    // DOM elements
    const examTitleEl = document.getElementById('exam-title');
    const timerEl = document.getElementById('timer');
    const progressBarEl = document.getElementById('progress-bar');
    const questionCounterEl = document.getElementById('question-counter');
    const questionTextEl = document.getElementById('question-text');
    const qcmOptionsEl = document.getElementById('qcm-options');
    const prevBtnEl = document.getElementById('prev-btn');
    const nextBtnEl = document.getElementById('next-btn');
    
    // Update the UI with current question
    function updateQuestionUI() {
      const currentQuestion = exam.questions[currentQuestionIndex];
      
      examTitleEl.textContent = exam.title;
      questionCounterEl.textContent = `Question ${currentQuestionIndex + 1} of ${exam.questions.length}`;
      questionTextEl.textContent = currentQuestion.question_text;
      progressBarEl.style.width = `${(currentQuestionIndex + 1) / exam.questions.length * 100}%`;
      
      // Update timer display
      timeLeft = currentQuestion.timer;
      updateTimerDisplay();
      
      // Update question type UI
      if (currentQuestion.type === 'qcm') {
        qcmOptionsEl.innerHTML = '';
        currentQuestion.options.forEach(option => {
          const isChecked = answers[currentQuestion.id] === option.id.toString();
          
          const optionEl = document.createElement('label');
          optionEl.className = `block p-3 rounded-lg border cursor-pointer transition-colors ${
            isChecked ? 'bg-purple-600/20 border-purple-500' : 'bg-slate-700 border-slate-600 hover:border-slate-500'
          }`;
          
          optionEl.innerHTML = `
            <div class="flex items-center">
              <input
                type="radio"
                name="question-${currentQuestion.id}"
                value="${option.id}"
                ${isChecked ? 'checked' : ''}
                class="sr-only"
              />
              <div class="w-4 h-4 mr-3 rounded-full flex items-center justify-center ${
                isChecked ? 'bg-purple-500' : 'border border-slate-400'
              }">
                ${isChecked ? '<div class="w-2 h-2 rounded-full bg-white"></div>' : ''}
              </div>
              <span class="text-slate-200">${option.text}</span>
            </div>
          `;
          
          optionEl.addEventListener('change', (e) => {
            answers[currentQuestion.id] = e.target.value;
          });
          
          qcmOptionsEl.appendChild(optionEl);
        });
      } else {
        qcmOptionsEl.innerHTML = `
          <textarea
            id="answer-${currentQuestion.id}"
            rows="4"
            placeholder="Enter your answer here..."
            class="w-full p-3 bg-slate-700 border border-slate-600 rounded-md text-slate-200 placeholder:text-slate-400 focus:outline-none focus:border-purple-500"
          >${answers[currentQuestion.id] || ''}</textarea>
        `;
        
        const textarea = document.getElementById(`answer-${currentQuestion.id}`);
        textarea.addEventListener('input', (e) => {
          answers[currentQuestion.id] = e.target.value;
        });
      }
      
      // Update button states
      prevBtnEl.disabled = currentQuestionIndex === 0;
      nextBtnEl.innerHTML = currentQuestionIndex === exam.questions.length - 1 ? 
        'Finish Exam' : 
        `Next Question <i data-lucide="arrow-right" class="w-4 h-4"></i>`;
      
      // Refresh Lucide icons
      lucide.createIcons();
    }
    
    // Update timer display
    function updateTimerDisplay() {
      timerEl.textContent = `${timeLeft}s`;
      if (timeLeft <= 5) {
        timerEl.classList.add('text-red-400');
        timerEl.classList.remove('text-slate-300');
      } else {
        timerEl.classList.remove('text-red-400');
        timerEl.classList.add('text-slate-300');
      }
    }
    
    // Start the timer
    function startTimer() {
      clearInterval(timerInterval);
      
      timerInterval = setInterval(() => {
        timeLeft--;
        updateTimerDisplay();
        
        if (timeLeft <= 0) {
          handleNextQuestion();
        }
      }, 1000);
    }
    
    // Handle next question
    function handleNextQuestion() {
      clearInterval(timerInterval);
      
      if (currentQuestionIndex < exam.questions.length - 1) {
        currentQuestionIndex++;
        updateQuestionUI();
        startTimer();
      } else {
        // Exam finished
        showExamFinished();
      }
    }
    
    // Handle previous question
    function handlePreviousQuestion() {
      clearInterval(timerInterval);
      
      if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        updateQuestionUI();
        startTimer();
      }
    }
    
    // Show exam finished screen
    function showExamFinished() {
      document.body.innerHTML = `
        <div class="min-h-screen bg-slate-800 flex items-center justify-center">
          <div class="w-full max-w-2xl p-8 bg-slate-900 border border-slate-700 shadow-xl rounded-lg">
            <div class="text-center">
              <h1 class="text-2xl font-bold text-white mb-4">Exam Finished</h1>
              <p class="text-slate-400 mb-6">You have completed all questions.</p>
              <button class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md flex items-center gap-2 mx-auto" id="score-btn">
                <i data-lucide="award" class="w-5 h-5"></i>
                Go to Score Page
              </button>
            </div>
          </div>
        </div>
      `;
      
      lucide.createIcons();
      
      document.getElementById('score-btn').addEventListener('click', () => {
        alert('In a real application, this would navigate to the score page with your results.');
        // In a real app, you would redirect to a score page
        // window.location.href = `/score/${exam.id}`;
      });
    }
    
    // Event listeners
    prevBtnEl.addEventListener('click', handlePreviousQuestion);
    nextBtnEl.addEventListener('click', handleNextQuestion);
    
    // Initialize the app
    updateQuestionUI();
    startTimer();
  </script>
</body>
</html>