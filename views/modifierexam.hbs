<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Modifier un examen</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .text-black {
      color: black;
    }
  </style>
</head>
<body class="bg-gray-900 text-white min-h-screen p-6">
  <div class="max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold mb-6">Modifier un examen</h1>
    <p>Exam ID: {{examId}}</p>

    <form id="examForm" class="space-y-6">
      <div>
        <label class="block mb-1 text-sm font-medium">Titre</label>
        <input type="text" id="title" name="title" class="w-full rounded-md border-gray-700 bg-gray-800 text-white p-2" required />
      </div>

      <div>
        <label class="block mb-1 text-sm font-medium">Description</label>
        <textarea id="description" name="description" class="w-full rounded-md border-gray-700 bg-gray-800 text-white p-2" rows="3"></textarea>
      </div>

      <div>
        <label class="block mb-1 text-sm font-medium">Dur√©e (minutes)</label>
        <input type="number" id="time_limit" name="duration" class="w-full rounded-md border-gray-700 bg-gray-800 text-white p-2" required />
      </div>

      <div id="questionsContainer" class="space-y-6">
        </div>

      <div class="flex justify-between">
        <button type="button" onclick="addQuestion()" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded-md text-white">Ajouter une question</button>
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-md text-white">Enregistrer</button>
      </div>
    </form>
  </div>

  <template id="questionTemplate">
    <div class="border border-gray-700 p-4 rounded-md bg-gray-800 space-y-4 question-block">
      <div>
        <label class="block text-sm font-medium">Question</label>
        <input type="text" name="questionText" class="w-full mt-1 p-2 rounded-md bg-gray-700 border border-gray-600 text-white" required />
      </div>

      <div>
        <label class="block text-sm font-medium">Points</label>
        <input type="number" name="points" min="1" value="10" class="w-full mt-1 p-2 rounded-md bg-gray-700 border border-gray-600 text-white" placeholder="Points" required />
      </div>

      <div>
        <label class="block text-sm font-medium">Timer (seconds)</label>
        <input type="number" name="timer" min="30" value="30" class="w-full mt-1 p-2 rounded-md bg-gray-700 border border-gray-600 text-white" placeholder="Timer (seconds)" required />
      </div>

      <div>
        <label class="block text-sm font-medium">Type</label>
        <select name="questionType" class="w-full mt-1 p-2 rounded-md bg-gray-700 border border-gray-600 text-white" onchange="toggleOptions(this)" required>
          <option value="direct-answer">R√©ponse directe</option>
          <option value="multiple-choice">Choix multiple</option>
        </select>
      </div>

      <div name="textCorrectAnswer" class="space-y-2 hidden">
        <label class="block text-sm font-medium">R√©ponse correcte</label>
        <input type="text" name="correctAnswer" class="block w-full rounded-md border-gray-300 shadow-sm p-2 text-black" placeholder="Entrez la r√©ponse correcte" />
      </div>

      <div name="mcOptions" class="space-y-2 hidden">
        <label class="block text-sm font-medium">Options (mark correct answer)</label>
        <div class="space-y-2 optionsContainer">
          </div>
        <div class="flex gap-2 mt-2">
          <button type="button" class="bg-blue-600 text-white px-2 py-1 rounded-md text-sm hover:bg-blue-700 addOptionBtn">Ajouter une option</button>
          <button type="button" class="bg-red-600 text-white px-2 py-1 rounded-md text-sm hover:bg-red-700 removeOptionBtn">Supprimer une option</button>
        </div>
      </div>

      <button type="button" onclick="removeQuestion(this)" class="bg-red-700 hover:bg-red-800 px-2 py-1 text-sm rounded-md text-white">Supprimer cette question</button>
    </div>
  </template>

<script>
  const examId = "{{examId}}";
  const questionsContainer = document.getElementById("questionsContainer");

  document.getElementById("examForm").addEventListener("submit", async function (e) {
    e.preventDefault();

    const title = document.getElementById("title").value;
    const description = document.getElementById("description").value;
    const time_limit = parseInt(document.getElementById("time_limit").value);

    const questionBlocks = document.querySelectorAll(".question-block");
    console.log("Number of question blocks found:", questionBlocks.length);

    const questionsData = [...questionBlocks].map((block) => {
      const questionInput = block.querySelector('input[name="questionText"]');
      const text = questionInput ? questionInput.value.trim() : null;
      const type = block.querySelector('select[name="questionType"]').value;
      const points = parseInt(block.querySelector('input[name="points"]').value) || 1;
      const timer = parseInt(block.querySelector('input[name="timer"]').value) || 0;
      const questionId = block.dataset.questionId;

      if (!text || !type) {
        alert("Please fill in all required fields for each question.");
        throw new Error("Validation failed: Missing required fields.");
      }

      if (type === "multiple-choice") {
        const optionDivs = block.querySelectorAll(".optionsContainer > div");
        const options = Array.from(optionDivs).map((div, index) => {
          const optionText = div.querySelector('input[type="text"]').value.trim();
          const isCorrect = div.querySelector('input[type="radio"]').checked;
          const optionId = div.dataset.optionId;

          if (!optionText) {
            alert("Please fill in all options for multiple-choice questions.");
            throw new Error("Validation failed: Missing option text.");
          }

          return { text: optionText, is_correct: isCorrect, id: optionId };
        });

        return { question_text: text, question_type: type, timer: timer, points: points, options: options, id: questionId };
      } else if (type === "direct-answer") {
        const correctAnswerInput = block.querySelector('input[name="correctAnswer"]');
        const correct_answer = correctAnswerInput ? correctAnswerInput.value.trim() : null;

        if (!correct_answer) {
          alert("Please provide the correct answer for direct-answer questions.");
          throw new Error("Validation failed: Missing correct answer.");
        }

        return { question_text: text, question_type: type, points: points, timer: timer, correct_answer: correct_answer, id: questionId };
      }

      return null;
    }).filter(q => q !== null);

    console.log("Data being sent:", {
      title,
      description,
      time_limit,
      questions: questionsData
    });
    console.log("üì§ Full data being sent to backend:");
    console.log(JSON.stringify({ title, description, time_limit, questions: questionsData }, null, 2));

    await fetch(`/auth/exams/${examId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ title, description, time_limit, questions: questionsData })
    }).then(async (response) => {
      if (!response.ok) {
        const error = await response.json();
        console.error("Error response from server:", error);
        alert(error.error || "Failed to update exam.");
      } else {
        alert("Examen modifi√© !");
      }
    }).catch((err) => {
      console.error("Network error:", err);
      alert("Network error occurred.");
    });
  });

  async function fetchExam() {
    try {
      const res = await fetch(`/auth/exams/${examId}`);
      if (!res.ok) {
        const errText = await res.text();
        console.error("Failed response:", res.status, errText);
        throw new Error("Failed to fetch exam");
      }

      const exam = await res.json();

      document.getElementById("title").value = exam.title;
      document.getElementById("description").value = exam.description;
      document.getElementById("time_limit").value = exam.time_limit;

      if (exam.questions && exam.questions.length > 0) {
        questionsContainer.innerHTML = '';
        exam.questions.forEach(addQuestion);
      }
    } catch (error) {
      console.error("Error fetching exam:", error);
      alert("Erreur lors du chargement de l‚Äôexamen");
    }
  }

  function addQuestion(data = {}) {
    const template = document.getElementById("questionTemplate");
    const clone = template.content.cloneNode(true);
    const block = clone.querySelector(".question-block");
    const questionIdForName = data.id || Date.now();

    block.dataset.questionId = questionIdForName;

    const questionInput = block.querySelector('input[name="questionText"]');
    const typeSelect = block.querySelector('select[name="questionType"]');
    const pointsInput = block.querySelector('input[name="points"]');
    const timerInput = block.querySelector('input[name="timer"]');
    const mcOptions = block.querySelector('[name="mcOptions"]');
    const textCorrectAnswer = block.querySelector('[name="textCorrectAnswer"]');
    const optionsContainer = block.querySelector('.optionsContainer');

    if (data.question_text) questionInput.value = data.question_text;
    if (data.question_type) {
      typeSelect.value = data.question_type;
      toggleOptions(typeSelect);
    }
    if (data.points) pointsInput.value = data.points;
    if (data.timer) timerInput.value = data.timer;

    if (data.question_type === "multiple-choice" && data.options && data.options.length > 0) {
      optionsContainer.innerHTML = "";
      data.options.forEach((opt, i) => {
        const div = document.createElement("div");
        div.className = "flex items-center gap-2";
        div.dataset.optionId = opt.id;
        div.innerHTML = `
          <input type="radio" name="correctOption-${questionIdForName}" value="${i}" class="h-4 w-4 text-blue-600 focus:ring-blue-500" ${opt.is_correct ? "checked" : ""} required />
          <input type="text" name="option-${questionIdForName}-${i}" class="block w-full rounded-md border-gray-300 shadow-sm p-2 text-black" placeholder="Option ${i + 1}" value="${opt.text}" required />
        `;
        optionsContainer.appendChild(div);
      });
    } else if (data.question_type === "direct-answer" && data.correct_answer) {
      textCorrectAnswer.querySelector('input[name="correctAnswer"]').value = data.correct_answer;
    }

    questionsContainer.appendChild(clone);
  }

  function removeQuestion(btn) {
    btn.closest(".question-block").remove();
  }

  function toggleOptions(select) {
    const block = select.closest(".question-block");
    const mcOptions = block.querySelector('[name="mcOptions"]');
    const textCorrectAnswer = block.querySelector('[name="textCorrectAnswer"]');
    const optionsContainer = mcOptions.querySelector('.optionsContainer');
    const questionIdForName = block.dataset.questionId || Date.now();

    if (select.value === "multiple-choice") {
      mcOptions.classList.remove("hidden");
      textCorrectAnswer.classList.add("hidden");

      // Add two default options only if none exist
      if (optionsContainer.children.length === 0) {
        for (let i = 0; i < 2; i++) {
          const div = document.createElement("div");
          div.className = "flex items-center gap-2";
          div.innerHTML = `
            <input type="radio" name="correctOption-${questionIdForName}" value="${i}" class="h-4 w-4 text-blue-600 focus:ring-blue-500" ${i === 0 ? "checked" : ""} required />
            <input type="text" name="option-${questionIdForName}-${i}" class="block w-full rounded-md border-gray-300 shadow-sm p-2 text-black" placeholder="Option ${i + 1}" required />
          `;
          optionsContainer.appendChild(div);
        }
      }
    } else if (select.value === "direct-answer") {
      mcOptions.classList.add("hidden");
      textCorrectAnswer.classList.remove("hidden");
    } else {
      mcOptions.classList.add("hidden");
      textCorrectAnswer.classList.add("hidden");
    }
  }

  questionsContainer.addEventListener('click', function(event) {
    if (event.target.classList.contains('addOptionBtn')) {
      const optionsContainer = event.target.closest('[name="mcOptions"]').querySelector('.optionsContainer');
      const newOptionIndex = optionsContainer.children.length;
      const questionBlock = event.target.closest('.question-block');
      const questionIdForName = questionBlock.dataset.questionId || Date.now();

      const newOptionDiv = document.createElement('div');
      newOptionDiv.className = 'flex items-center gap-2';
      newOptionDiv.innerHTML = `
        <input type="radio" name="correctOption-${questionIdForName}" value="${newOptionIndex}" class="h-4 w-4 text-blue-600 focus:ring-blue-500" required />
        <input type="text" name="option-${questionIdForName}-${newOptionIndex}" class="block w-full rounded-md border-gray-300 shadow-sm p-2 text-black" placeholder="Option ${newOptionIndex + 1}" required />
      `;
      optionsContainer.appendChild(newOptionDiv);
    } else if (event.target.classList.contains('removeOptionBtn')) {
      const optionsContainer = event.target.closest('[name="mcOptions"]').querySelector('.optionsContainer');
      if (optionsContainer.children.length > 2) {
        optionsContainer.removeChild(optionsContainer.lastElementChild);
      } else {
        alert("Vous devez avoir au moins deux options.");
      }
    }
  });

  fetchExam();
</script>

</body>
</html>